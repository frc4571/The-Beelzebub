//------------------------------------------- PLUGIN DEFINITION -----------------------------------------------//

plugins {
    id "java-gradle-plugin"
    id "eclipse"
    id "jacoco"
}

//------------------------------------------- VERSION MANAGEMENT -----------------------------------------------//

version = '1.0'
sourceCompatibility = 1.8
targetCompatibility = 1.8

//------------------------------------------- DEPENDENCY MANAGEMENT -----------------------------------------------//

// Defining the dependency repository locations
repositories {
	// If you are behind a firewall and have a local maven repo set up, then use
    mavenLocal()
    
    // If you aren't behind a firewall, then use
    mavenCentral(); 
}

dependencies {
	  compile files('libs/WPILib.jar', 'libs/NetworkTables.jar', 'libs/cscore.jar', 'libs/opencv.jar', 'libs/TalonSRXLibJava.jar', 'libs/log4j-1.2.17.jar','libs/slf4j-api-1.7.22.jar','libs/slf4j-log4j12-1.7.22.jar' )
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

//------------------------------------------- BUILDING THE JAR -----------------------------------------------//

// Where should the build get the source files from?
sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['src/resources']
        }
    }
}

// Appending a project version to the jar. version is passed in with -PprodVersion=...
allprojects {
   if (project.hasProperty('prodVersion')) {
     project.version = project.prodVersion
   } else {
     project.version = 'developer-build'
   }
}

// Defining the jar manifest
def robotManifest = {
  attributes 'Main-Class': 'edu.wpi.first.wpilibj.RobotBase'
  attributes 'Implementation-Title': 'Crate Robot'
}

task fatjar( type: Jar ) {
	manifest robotManifest
	baseName = project.name
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	with jar
}

jar.finalizedBy(fatjar) 

//----------------------------------------- CODE COVERAGE REPORTS ------------------------------------------------//

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    reports {
        xml.enabled true
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled false
        csv.enabled false
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}